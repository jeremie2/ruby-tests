
######## WORKING WITH BLOCKS

:::::::: Example 1

What's happening in this, seemingly simple, piece of code? Take it apart and
try to describe every interaction with precision.

  [[1, 2], [3, 4]].each do |arr|
    puts arr.first
  end
  # 1
  # 3
  # => [[1, 2], [3, 4]]


::::: MY ATTEMPT:

- The #each methods perform an iteration on the array's elements.
- The elements of the array are two arrays, both made of two integers.
  - Inside the block.
    - Every element will be assigned to variable 'arr'.
    - Each time it will be performed: puts arr.first
      As 'arr.first' return the first element of 'arr'
      will be printed.
  - First iteration: arr = [1, 2] and 1 is printed.
  - Second and last iteration: arr = [3, 4] and 3 is printed.
- Once the the iteration is finished #each methods will return the
  original collection.

::::: SOLUTION:

The Array#each method is being called on the multi-dimensional array [[1, 2],
[3, 4]]. Each inner array is passed to the block in turn and assigned to the
local variable arr. The Array#first method is called on arr and returns the object at index 0 of the current array - in this case the integers 1 and 3, respectively. The puts method then outputs a string representation of the integer. puts returns
nil and, since this is the last evaluated statement within the block, the return
value of the block is therefore nil. each doesn't do anything with this returned
value though, and since the return value of each is the calling object - in this
case the nested array [[1, 2], [3, 4]] - this is what is ultimately returned.


What specific pieces of information are we interested in keeping track of?


- What's the type of action being performed (method call, block, conditional..)?
- What's the object that action is being performed on?
- What's the side-effect of that action (e.g. output or destructive action)?
- What's the return value of that action?
- Is the return value used by whatever instigated the action?


We can take these pieces of information and set them out in a tabular format:


##############################################################################
#      #            #             # Side     # Return        # Is Return     #
# Line # Action     # Object      # Effect   # Value         # Value Used?   #
##############################################################################
# 1   :: mthd call :: outer      ::           :: calling    :: No, but shown #
#     :: (each)    :: array      ::  none     :: object     :: on line 6     #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
# 1-3 :: block     :: each       ::           ::            ::               #
#     :: execution :: sub-arr    ::  none     :: nil        :: no            #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
# 2   :: mthd call :: each       ::           :: el idx[0]  ::               #
#     :: (first)   :: sub-arr    ::  none     :: of sub-arr :: yes, by puts  #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#     ::           ::            :: Output    ::            :: Yes to determ #
# 2   :: mthd call :: el idx[0]  :: str repr  ::            :: return block  #
#     :: (puts)    :: of sub-arr :: of int    :: nil        :: value         #
##############################################################################























