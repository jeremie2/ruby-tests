:::::::::::::::::::::::::::::: QUESTIONS

::::::::: 02 ruby style

- What about indents?
  To improve readability, Ruby code uses indentation with 2 spaces:

    if 5 > 1
      puts 'yes'
    else
      puts 'no'
    end

- When are uppercase, camel case or snake case used?
  - UPPERCASE: constant
  - CamelCase: class
  - snake_case: variable, method, file

- How can we place comments inside code?
  Using: #
  or for blocs of code:

    =begin
    ...code here
    =end
  
- What's the syntax for blocks?
  A block after a method is made of

    do
    ...code here
    end

  If we have only one line, we just use curly brackets { ...code here }

::::::::: 03 kick off

- What's the goal of the lesson?
  - fluency with syntax
  - think like a programmer. To reach that we have to gain some experience
    building little programs and debugging them.

- What' procedural programming? (more or less)
  We build a program step by step using basic functionalities.

- ...and object programming? (more or less)
   We build using sophisticated methods which hide all the steps.

- Difference between coding and programming?
  Coding is more about concentrating on the syntax, programming has to do
  with focusing on problem solving while building an app.

- What is pseudo code?
  While creating an app, instead of start immediately to write regular code
  (with proper syntax), it's useful to start writing down sentences that
  explain/describe every step.
  After that we can proceed replacing sentences with a sort of source code
  (not real code) that explain more precisely but in a schematic way what we
  are going to perform (conditional, loop, etc..).
  That is pseudo code.
  In the end pseudo code will be replaced by regular code.
  

::::::::: 06 truthiness

- Is everything in Ruby evaluated to 'true'?
  No, nil and false are never evaluated to true.

- What is 'truthiness'?
  Truthiness is a sort of state of most expressions in ruby that is always
  evaluated to true.
  Careful!! This doesn't mean that its value is true.
  
    if 'ciao'.upcase
      puts 'hi'
    else
      puts 'bye'
    end
    
    # hi
     
  'ciao'.upcase is evaluated as true. The same would be replacing 'ciao'.upcase
  with 5 + 5... it doesn't make any difference.
  The only way to get a different result is:
  - directly using nil, false
  - performing a boolean evaluations that return false (like 5 == 1)
  - performing something that return nil or false (puts statement return nil)

	if puts 5
	  puts 'hi'
	else
	  puts 'bye'
	end
    
    # bye

- What are logical operators and what they do?
  - &&: it means 'and'.
  - ||: it means 'or'.
  
  Comparing 2 expressions:
  - && returns true only if both are true
  - || returns false only if both are false

- Are 'true' and 'false' object?
  Yes they are. true.class => TrueClass and false.class => FalseClass

- Can you explain 'short circuiting' property of || and && operators?
  When using logical operators, they stop the evaluation once they reach
  result. Example:
  5 > 10 && 5 == 5  the 2nd statement will never be evaluated. As the 1st
                    is already false, evaluation stops... that's enough
                    for the result.


::::::::: 07 calculator intro video

- Kernel.puts("ciao")... what is Kernel?
  Kernel is a module defined inside class Object and therefore always
  available (except inside class definitions) and we don't need to prefix
  'Kernel.' before the method name. Many of the most popular methods are
  defined into this module:
    Kernel.puts, Kernel.gets, Kernel.print, etc...
  but we are used to see them as:
    puts, gets, print, etc...


::::::::: 08 pseudo code

- What are the 2 layers to solve any problem?
  1- Logical problem domain layer
  2- Syntactical programming language layer
  
- What's the help of pseudo code?
  Pseudo code help us to fix first the logic of the program. Then, once
  we have the structure of the program it's easy to implement the syntax.

- What are the keywords used in pseudo code?
  START
  SET: set a variable
  GET: asking input from user
  PRINT
  IF / ELSE IF/ ELSE
  WHILE
  END


::::::::: 09 flowchart

- Why are flowcharts useful?
  They can be useful to see at the problem we are trying to solve in a
  schematic way, while pseudo-code can become extremely verbose.

- What are the elements of a flowchart?
                   ________
  start/stop      (________)
                   _______
  processing step |_______|
                    ________
  input/output     /_______/

                    /\
                   /  \  
  decision         \  /
                    \/
                   _
  connector       (_) 


::::::::: 10 rubocop

- What is Rubocop?
  Rubocop is a software that checks syntax and style of your code, and
  where possible even logic error.


::::::::: 13 debugging

- What's the best temperament for debugging?
  Patient, systematic and logical. Stop crying and see for a possible solution!

- What is important to note inside a stack trace?
  Things like "NoMethodError: undefined method `name' for nil:NilClass".
  It could immediately make sense or we could start here for some online
  research (documentation or search engines). 

- What can you do to understand what's happening with an error?
  Trying to reproduce an error.
  Trying to understand which are the boundaries of the error. Playing with 
  variables and methods to see what else is affected.

- What are the techniques for debugging?
  - Reading line by line
  - Using pry
  - Have a wlak!
  - Rubber duck


::::::::: 18 variable scope

- What is a variable scope?
  Inside a program it's where a variable is available.
  This depends by 'where' the variable is created.

- What define a variable scope?
  A block of code after a method like {} or do..end block.

- What about inner and outer scope variables?
  Outer scope variable: created outside a block.
    It can be accessed from inner scope.
  Inner scope variable: created inside a block.
    It can't be accessed from outer scope.

- Can variables inside 2 different blocks be accessed by each others inner scope?
  No. A variable defined inside a block can't be accessed from another block.

- And what about nested blocks?
  Same rules... from inner scope you can access outer scope, not vice versa.

- What is variable shadowing?
  When a 'flow variable' inside a block has the same name of a variable outside
  the block, then the inside variable got precedence in the block.
  Outer scope variable will not be accessible.
  
- Can a method definition access in outer scope?
  That is possible in 2 ways:
  - passing outside variables as argument and assigned them a local variables
  - interacting with blocks, which can access outer scope variables (Chapter 19)
  
- What about constants?
  Constants can be accessed from anywhere.


::::::::: 19 more variable scope

- How can methods interact with blocks?
  Placing 'yeld' inside the definition:

    def greetings
      yield
      puts "Goodbye"
    end

    word = "Hello"

    greetings do
      puts word
    end

    # 'Hello'
    # 'Goodbye'
  

::::::::: 20 pass by reference vs pass by value

- What does it mean pass by value?
  It's when passing a variable to a method will not affect the original variable,
  because the method will alter just a copy of the variable.

  Let's see this example:
  
    def change_name(a_name)
      a_name = 'bob'
    end

    name = 'jim'
    change_name(name)
    puts name           # => jim

  When 'name' is passed to 'change_name', variable name and a_name are sharing
  the same value stored at the same memory address... which is 'jim'.
  Then inside the method we have: a_name = 'bob'
  We are now assigning to a_name a different value stored in a different memory address.
  Whatever we do with a_name will never effect the original variable. 
  
  That's passing by value.

- What does it mean pass by reference?
  It's when passing a variable to a method will affect the original variable,
  because the method will alter the value of the original variable.
  
  Let's see this example:

    def cap(str)
      str.capitalize!
    end

    name = "jim"
    cap(name)
    puts name           # => Jim

  When 'name' is passed to 'cap', variable name and str are sharing the same
  value stored at the same memory address... which is 'jim'.
  Then inside the method we have: str.capitalize!
  capitalize! does change the value stored at that memory address. Doing this
  both variable will be affected, their value is now 'Jim'. 
  
  That's passing by reference. 

- Which are the methods that nutate the caller?
  All methods with '!' and some others like Array#<<

- What is a variable?
  A label created to refer to some physical memory address.

- What does it happen when we assign a variable to another variable?
  Both variable point to the same memory address.
  If we change the value inside the memory address, using a method that mutates
  the caller, then both variable will be affected.

- We have a = b. Does a = c (reassignment) affect b?
  No. A different value has been assigned to a, this doesn't change b.


::::::::: 20 xtra1 mutability

- What's mutability?
  It's when an object stored into a memory address can change.
  Not assigning new value, but performing an operation that change that value.

- What is object_id?
  It's an ID that refer to a memory address of the object.
  Doing a = b, a and b will point the same object and they've got same object_id.

- What are immutable objects?
  - numbers
  - boolean
  - nil
  - range object (e.g., 1..10)

- Does object_id of an array change if we reassign its elements? 
  No. Only the single element will have a different object_id.

- Does assignment with operators *= and += mutate the operands?
  No, never. We are just assigning a new value.

- Does indexing assignment mutates the operands?
  Yes, str[3] = 'x', array[5] = Person.new, hash[:age] = 25....
  They modify the original object, but object_id is still the same.
  Just remember that the elements will be different, they will point to a new object.

- Does concatenation mutates the operands?
  Yes.
  str = 'ciao'
  str << 'ciao'  # str = 'ciaociao'


::::::::: 22 coding tips 2

- Are blanked lines useful inside your code?
  Yes, they can be used so that every section can be divided so that it will be
  highlighted.

- Should a method return or display?
  Please avoid creating methods that returns values and produce side effects!
  Good code provides just one action for a method.

- Is it important to give a good name to a method?
  It's the best practise.
  We should understand what a method does just reading the name.
  
  Without looking at the implementation, a method called:
  - total: should return a value 
  - print_total: should display a value and return nil
  - total!: should mutate a value

- Is it OK to mutate the caller while iterating?
  No!
  Example: deleting elements of an array while iterating will mess up the
  order of the elements (what was the second will be the first...).

- How can I solve a problem created by variable shadowing?
  By using better naming (and using Rubocop!). Example:

    name = 'johnson'

    ['kim', 'joe', 'sam'].each do |name|
      puts "#{name} #{name}"
    end

    # => kim kim   As you can see outer scope 'name'
    # => joe joe   can't be accessible. Inside the block
    # => sam sam   only |name| is seen.
  
  Just using a different variable name into inner scope does the job:

    name = 'johnson'

    ['kim', 'joe', 'sam'].each do |first_name|
      puts "#{first_name} #{name}"
    end

    # => kim johnson
    # => joe johnson
    # => sam johnson

- What should we do when, while iterating the block, variable is not used?
  It's a good practice to name the variable with an underscore _

    names = ['kim', 'joe', 'sam']
    names.each { |_| puts "got a name!" }

