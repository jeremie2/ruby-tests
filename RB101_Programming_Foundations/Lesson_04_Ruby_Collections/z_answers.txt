:::::::::::::::::::::::::::::: QUESTIONS

::::::::: 02 Collections basics

- What are collections?
  A collection is an object that contains individual elements.
  
- What is a string?
  It's a collection of character enclosed inside quote or double quote.

- What is an array?
  It's a collection of elements of any type (string, integer, array..) enclosed inside square brackets.

- Are strings and array following an order to represent each element?
  Yes, an array is a ordered list so as the collection of characters into a string.
  We can represent each character using an 'index' inside square brackets, starting
  from the first element index = 0 and adding one unit for any further element.

    str = 'ciao'
    str[0]         # => 'c'
    str[2]         # => 'a'

    arr = ['a', 'b', 'c']
    arr[0]         # => 'a'
    arr[1]         # => 'b'

- What about using a negative index for array/string?
  In this case we start from right to left and the first element is at index -1:

    str = 'abcde'
    str[-2]        # => "b"

- How does method String#slice and Array#slice work?
  The method string slice takes as parameter the index of the first slice element
  and the number of elements we want into the slice.
  Let's see an example with strings. The method looks like str.slice(1, 3), but
  there's an easier way to use it:

    str[1, 3]      # => 'iao'  # slice: str[first_ch, num_of_ch]

  Same with array:

    arr[1, 2]      # => ['b', 'c']

- What is a hash?
  It's a collection of key-values pairs.

- Are the elements of hashes ordered?  
  No.

- How can we access elements of a hash?
  We can use the key as parameter inside square brackets. Let's see an example:

    hsh = { 'fruit' => 'apple', 'vegetable' => 'carrot' }
    hsh['fruit']       # => 'apple'

- Can we use the same key more than one time?
  No. If we do it the second pairs key-value is going to overwrite the first one.
  
    hsh = { 'fruit' => 'apple', 'vegetable' => 'carrot', 'fruit' => 'pear' }

  this rises a warning and that's this is how the hash will change:

    {"fruit"=>"pear", "vegetable"=>"carrot"}

- Can we access just keys or just values?
  Yes, this is possible through the Hash#keys and Hash#values which return arrays
  made of keys and values:

  country_capitals = {uk: 'London', france: 'Paris', germany: 'Berlin'}
  country_capitals.keys      # => [:uk, :france, :germany]
  country_capitals.values    # => ["London", "Paris", "Berlin"]

- What happens if to access an element of a string or array using an out of
  bound index? 
  This returns nil:
  
    str = 'abcde'
    arr = ['a', 'b', 'c', 'd', 'e']

    str[5] # => nil
    arr[5] # => nil

  This might be OK for strings. In that case it's obviously not a character of
  a string. We have a major problem with arrays because nil could be a value of
  an array.

- How can we prevent the out of bound problems? 
  Using Array#fetch an IndexError will be returned when we are outside bounds.

    arr = ['a', 'b', 'c', 'd', 'e']
    arr.fetch(10)   # => IndexError: index 10 outside of array bounds: -5...5

- What happens if in a hash when we use a missing key? 
  It will return nill and this is a problem because we can take this pair
  key/value as existing.
  To prevent this problem, Hash#fetch method rises an "IndexError not found" error.

- How can we convert a string to arr?
  With String#chars method.

    str = 'Ciao'
    arr = str.chars    # => ["C", "i", "a", "o"]

- How can we convert an array to a string?
  With Array#join method.

  arr.join           # => "Ciao"
  arr.join(' ')      # => "C i a o"  Space ' ' as argument will divide
                     #               single character.