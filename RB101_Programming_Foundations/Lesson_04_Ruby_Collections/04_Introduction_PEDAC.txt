
########## LOOPING

The PEDAC process is a way to approach problems and solve them.

- Problem        # understand the problem
- Examples       # test cases
- Data           # data structures
- Algorithm
- Code


####### P - [Understand the] Problem

This is the path to understand a problem:

1. read the problem description
2. check the test cases, if any
3. If any part of the problem is unclear, ask the interviewer to clarify the matter

Example:

# Given a string, write a method change_me which returns the same
# string but with all the words in it that are palindromes uppercased.
#
# change_me("We will meet at noon") == "We will meet at NOON"
# change_me("No palindromes here") == "No palindromes here"
# change_me("") == ""
# change_me("I LOVE my mom and dad equally") == "I LOVE my MOM and DAD equally"


Things that may need clarification to the interviewer:

1. What is a palindrome?
2. Should the words in the string remain the same if they already use uppercase?
3. How should I deal with empty strings provided as input?
4. Can I assume that all inputs are strings? 
5. Should I consider letter case when deciding whether a word is a palindrome?
6. Do I need to return the same string object or an entirely new string?

Write down the INPUT and the OUTPUT and describe the rules you must follow.

# input: string
# output: string (not the same object)
# rules:
#      Explicit requirements:
#        - every palindrome in the string must be converted to
#          uppercase. (Reminder: a palindrome is a word that reads
#          the same forwards and backward).
#        - Palindromes are case sensitive ("Dad" is not a palindrome, but "dad" is.)
#
#      Implicit requirements:
#        - the returned string shouldn't be the same string object.
#        - if the string is an empty string, the result should be an empty
#          string


####### Data Structure / Algorithm

First try to write the input, output and rules for the following problem:

# Given a string, write a method `palindrome_substrings` which returns
# all the substrings from a given string which are palindromes. Consider
# palindrome words case sensitive.
#
# Test cases:
# palindrome_substrings("supercalifragilisticexpialidocious") == ["ili"]
# palindrome_substrings("abcddcbA") == ["bcddcb", "cddc", "dd"]
# palindrome_substrings("palindrome") == []
# palindrome_substrings("") == []

Some questions you might have?
1. What is a substring?
2. What is a palindrome?
3. Will inputs always be strings?
4. What does it mean to treat palindrome words case-sensitively?

input: string
output: an array of substrings
rules:
     Explicit requirements:
       - return only substrings which are palindromes.
       - palindrome words should be case sensitive, meaning "abBA"
         is not a palindrome.

Algorithm:
 - initialize a result variable to an empty array
 - create an array named substring_arr that contains all of the
   substrings of the input string that are at least 2 characters long.

 - loop through the words in the substring_arr array.
 - if the word is a palindrome, append it to the result array
 ## THIS STEPS NEEDS FURTHER EXPLANATIONS, THERE'S NO TRACE
 ## OF HOW THE ALGORITHM SHOULD WORK

 - return the result array


First part of the code:

  def palindrome_substrings(str)
    result = []
    substrings_arr = substrings(str)
    substrings_arr.each do |substring|
      result << substring if is_palindrome?(substring)
    end
    result
  end

Still need to define substrings(str) and is_palindrome?(substring).

#### SMALL EXAMPLE

Let's take the string:

  'halo'

and write all the substring that are at least made of 2 characters:

  ['ha', 'hal', 'halo', 'al', 'alo', 'lo']

We have followed a pattern made of 2 LOOPS:
- loop 1: from index 0 to the last
- loop 2: from substring length 2 until there are no substrings:
          extract substring

Putting things together:

# for each starting index from 0 through the next to last index position
#   for each substring length from 2 until there are no substrings of that length
#     extract the substring of the indicated length starting at the indicate 
#     index position
#   end of inner loop
# end of outer loop.

Begin with index = 0 => 'h'                     # outer loop
we find these substrings ['ha', 'hal', 'halo']  # inner loop

inner loop:
- we get 2-letter substring beginning at index 0: 'ha'
- we get 3-letter substring beginning at index 0: 'hal'
- we get 4-letter substring beginning at index 0: 'halo'

length starts from 2 to 4

..............................

Then with index = 1 => 'a'                     # outer loop
we find these substrings ['al', 'alo']         # inner loop

inner loop:
- we get 2-letter substring beginning at index 0: 'al'
- we get 3-letter substring beginning at index 0: 'alo'

length starts from 2 to 3

..............................

Then with index = 2 => 'l'                     # outer loop
we find this substrings ['lo']                 # inner loop

inner loop:
- we get 2-letter substring beginning at index 0: 'lo'

length starts from 2 to 2


#### What if a string is made of 7 character?

- iteration 1: sub-str length from 2 to 7
- iteration 2: sub-str length from 2 to 6
- iteration 3: sub-str length from 2 to 5
- iteration 4: sub-str length from 2 to 4
- iteration 5: sub-str length from 2 to 3
- iteration 6: sub-str length stops at 2


#### We can generalize:

- OUTER LOOP iterates from index 0 till index length-2:
  string 'scuby'
  index   01234    's' => 0 ... 'b' => 3 which is length-2
                                                  (5-2 = 3)

- INNER LOOP iterates each time from length 2 to (length - index)
  string 'scuby'
  index   01234
  length = 5
  
  start_index = 0
  sub_str = 2 to (length - start_index) = 5 - 0 = 5
  
  start_index = 1
  sub_str = 2 to (length - start_index) = 5 - 1 = 4
  
  start_index = 2
  sub_str = 2 to (length - start_index) = 5 - 2 = 3

  start_index = 3
  sub_str = 2 to (length - start_index) = 5 - 3 = 2  last step because of outer loop


#### COMPLETE ALGORITHM

# - create an empty array called 'result' that will contain all required substrings
# - create a starting_index = 0 for the starting index of a substring
# - start a loop that iterates from starting_index to 'string length - 2'
#   - create a variable num_chars = 2 for the substring length  
#   - start a loop that iterates from num_chars to 'string length - starting_index'
#     - extract a substring of length 'num_chars' from 'string' starting at 'starting_index'
#     - append the extracted substring to the 'result' array
#     - increment the 'num_chars' variable by '1'
#   - end inner loop 
#   - increment the 'starting_index' by '1'
# - end the outer loop
# - return the 'result' array


##### TO PSEUDOCODE

START

## Given a string named 'string'

SET result = []
SET starting_index = 0

WHILE starting_index <= length of string - 2
  SET num_chars = 2
  WHILE num_chars <= length of string - starting_index
    SET substring = num_chars characters from starting_index of the string 
    append substring to result
    SET num_chars += 1

  SET starting_index += 1

RETURN result


##### TO CODE

def substrings(str)
  result = []
  starting_index = 0;

  while (starting_index <= str.length - 2)
    num_chars = 2
    while (num_chars <= str.length - starting_index)
      substring = str.slice(starting_index, num_chars)
      result << substring
      num_chars += 1
    end
    starting_index += 1
  end
  result
end


##### palindrome?() method

def is_palindrome?(str)
  return str == str.reverse
end


############## COMPLETE INFORMAL PSEUDOCODE

# input: a string
# output: an array of substrings
# rules: palindrome words should be case sensitive, meaning "abBA"
#        is not a palindrome

# Algorithm:
#  substrings method
#  =================
#    - create an empty array called `result` that will contain all required substrings
#    - create a `starting_index` variable (value `0`) for the starting index of a substring
#    - start a loop that iterates over `starting_index` from `0` to the length of the string minus 2
#      - create a `num_chars` variable (value `2`) for the length of a substring
#      - start an inner loop that iterates over `num_chars` from `2` to `string.length - starting_index`
#        - extract a substring of length `num_chars` from `string` starting at `starting_index`
#        - append the extracted substring to the `result` array
#        - increment the `num_chars` variable by `1`
#      - end the inner loop
#      - increment the `starting_index` variable by `1`
#    - end the outer loop
#    - return the `result` array

#  is_palindrome? method
#  =====================
# - Inside the `is_palindrome?` method, check whether the string
#   value is equal to its reversed value. You can use the
#   String#reverse method.

#  palindrome_substrings method
#  ============================
#  - initialize a result variable to an empty array
#  - create an array named substring_arr that contains all of the
#    substrings of the input string that are at least 2 characters long.
#  - loop through the words in the substring_arr array.
#  - if the word is a palindrome, append it to the result
#    array
#  - return the result array


############## COMPLETE CODE

def substrings(str)
  result = []
  starting_index = 0;

  while (starting_index <= str.length - 2)
    num_chars = 2
    while (num_chars <= str.length - starting_index)
      substring = str.slice(starting_index, num_chars)
      result << substring
      num_chars += 1
    end
    starting_index += 1
  end
  result
end

def is_palindrome?(str)
  str == str.reverse
end

def palindrome_substrings(str)
  result = []
  substrings_arr = substrings(str)
  substrings_arr.each do |substring|
    result << substring if is_palindrome?(substring)
  end
  result
end

p palindrome_substrings("supercalifragilisticexpialidocious"); # ["ili"]
p palindrome_substrings("abcddcbA");   # ["bcddcb", "cddc", "dd"]
p palindrome_substrings("palindrome"); # []
p palindrome_substrings("");           # []
