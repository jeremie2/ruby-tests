
######################### FOUNDAMENTALS METHODS

####### A USEFUL TABLE

##############################################################
#        #            # Considers #             #            #
#        #            # return    # Returns     # Returned   #
# Method #  Action    # block's   # new         # collection #
#        #            # value?    # collection? # length     #
##############################################################
#        ::           ::          ::   No       ::           #
# each   :: Iteration ::   No     :: (returns   :: Original  #
#        ::           ::          ::  original) ::  length   #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::# 
#        ::           ::          ::            :: Original  #
# select :: Selection ::   Yes    ::    Yes     ::  length   #
#        ::           :: (truthy) ::            ::  or less  #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
#        :: Transfor- ::          ::            ::           #
# map    ::  mation   ::   Yes    ::    Yes     :: Original  #
#        ::           ::          ::            ::  length   #
##############################################################

                      EACH - SELECT - MAP

::::::::::::::: ITERATION

##### EACH

return: original collection

::::::::

[1, 2, 3].each do |num|
  puts num
end

::::::::

hash.each do |key, value|
  puts "The key is #{key} and the value is #{value}"
end


:::::::::::::: SELECTION

##### SELECT

return: new collection made of elements that return true to a condition

::::::::

[1, 2, 3].select do |num|
  num.odd?
end

# [1, 3]

::::::::

{a: 1, b: 2, c: 3}.select do |key, val|
  val.odd?
end

# {:a=>1, :c=>3}


:::::::::::::: TRANSFORMATION

##### MAP

return: a new array made of the result of block operations

::::::::

[1, 2, 3].map do |num|
  num * 2
end
# => [2, 4, 6]

::::::::

[1, 2, 3].map do |num|
  num.odd?
end
# => [true, false, true]

::::::::

{a: 1, b: 2, c: 3}.map do |key, val|
  val.odd?
end
# => [true, false, true]


######################### MORE METHODS

                      ANY? - ALL? - EACH_WITH_INDEX - EACH_WITH_OBJECT
                      FIRST - INCLUDE? - PARTITION

##### ANY?

return: true as soon as it encounters a true condition during the loop

::::::::

[1, 2, 3].any? do |num|
  num > 2
end

# => true

::::::::

{ a: "ant", b: "bear", c: "cat" }.any? do |key, value|
  value.size > 3
end

# => false   ... last evaluation is "bear".size > 3 as it returns 'true'
#                loops stops immediately. 'cat' is not evaluated.


##### ALL?

return: true if each element return true to a condition

::::::::

[1, 2, 3].all? do |num|
  num > 2
end

# => false

::::::::

{ a: "ant", b: "bear", c: "cat" }.all? do |key, value|
  value.length >= 3
end

# => true


##### EACH_WITH_INDEX

return: the original collection

::::::::

[1, 2, 3].each_with_index do |num, index|
  puts "The index of #{num} is #{index}."
end

# The index of 1 is 0.
# The index of 2 is 1.
# The index of 3 is 2.
# => [1, 2, 3]

::::::::

{ a: "ant", b: "bear", c: "cat" }.each_with_index do |pair, index|
  puts "The index of #{pair} is #{index}."
end

# The index of [:a, "ant"] is 0.     # [ [a: "ant"], [b: "bear"], ... ]
# The index of [:b, "bear"] is 1.
# The index of [:c, "cat"] is 2.
# => { :a => "ant", :b => "bear", :c => "cat" }


##### EACH_WITH_OBJECT

return: the collection with element elaborated inside the block

::::::::

[1, 2, 3].each_with_object([]) do |num, array|
  array << num if num.odd?
end

# => [1, 3]

::::::::

{ a: "ant", b: "bear", c: "cat" }.each_with_object([]) do |pair, array|
  array << pair.last
end

# pair = [a:, "ant"]... [b:, "bear"]... [c:, "cat"]
#
# => ["ant", "bear", "cat"]

::::::::

{ a: "ant", b: "bear", c: "cat" }.each_with_object({}) do |(key, value), hash|
  hash[value] = key
end

# => { "ant" => :a, "bear" => :b, "cat" => :c }


##### FIRST

return: the first element of a collection. If used with "n" integer parameter
        it returns the first "n" elements of the collection

::::::::

[1, 2, 3].first
# => 1

::::::::

[1, 2, 3].first(2)
# => [1, 2]

::::::::

{ a: "ant", b: "bear", c: "cat" }.first(2)
# => [[:a, "ant"], [:b, "bear"]]


##### INCLUDE?

return: true if the argument exist in the collection
        (in a hash checks only keys, for values better use #value?)

::::::::

[1, 2, 3].include?(1)
# => true

::::::::

{ a: "ant", b: "bear", c: "cat" }.include?("ant")
# => false

..but using #value?

hash.value?('cat')    # instead of: hash.value.include?('cat')
# => true

::::::::

{ a: "ant", b: "bear", c: "cat" }.include?(:a)
# => true


##### PARTITION

return: a nested array made of elements divided by criterion 

::::::::

[1, 2, 3].partition do |num|
  num.odd?
end
# => [[1, 3], [2]]

::::::::

odd, even = [1, 2, 3].partition do |num|
  num.odd?
end

# => [[1, 3], [2]]
# odd = [1, 3]
# even = [2]

::::::::

long, short = { a: "ant", b: "bear", c: "cat" }.partition do |key, value|
  value.size > 3
end

# => [[[:b, "bear"]], [[:a, "ant"], [:c, "cat"]]]
#
# long = [[:b, "bear"]]
# short = [[:a, "ant"], [:c, "cat"]]
#
# To transform to hashes:

long.to_h    # => {:b=>"bear"}
short.to_h   # => {:a=>"ant", :c=>"cat"}
