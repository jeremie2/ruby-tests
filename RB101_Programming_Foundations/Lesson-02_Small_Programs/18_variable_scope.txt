
:::::::::: VARIABLE SCOPE

A variable's scope determines where in a program a variable is available for use.
Variable's scope is defined by where the variable is created/initialized.

In Ruby variable scope is defined by a block a piece of code following a method 
invocation, delimited by curly braces {} or do..end.

Inner scope can access variables initialized in an outer scope,
but not vice versa.


:::: OUTER SCOPE VARIABLES CAN BE ACCESSED BY INNER SCOPE

  a = 1         # outer scope variable

  loop do       # the block following the invocation of the `loop` method creates an inner scope
    puts a      # => 1
    a = a + 1   # "a" is re-assigned to a new value
    break       # necessary to prevent infinite loop
  end

  puts a        # => 2  "a" was re-assigned in the inner scope


1- Inner scope can access outer scope variables.
2- You can change variables from an inner scope and have that change affects
   the outer scope.

(!) We have to be very careful that we're not accidentally re-assigning an 
    existing variable in an outer scope.
    Thats's a good reason to avoid single-letter variable names.

Inner scope variables cannot be accessed in outer scop:


:::: INNER SCOPE VARIABLES CANNOT BE ACCESSED IN OUTER SCOPE

  loop do
    b = 1
    break
  end

  puts b    # => NameError: undefined local variable or method `b' for main:Object


:::: PEER SCOPES DO NOT CONFLICT

From an inner scope you can't see what has been created in another inner scope:

  2.times do
    a = 'hi'
    puts a    # 'hi' <= this will be printed out twice due to the loop
  end

  loop do
    puts a    # => NameError: undefined local variable or method `a' for main:Object
    break
  end

  puts a      # => NameError: undefined local variable or method `a' for main:Object


..we can use same names for variable inside different blocks of code that follow
loops. 


:::: NESTED BLOCKS

When dealing with nested blocks, our usage of what's "outer" or "inner" is going to be relative. We'll switch vocabulary and say "first level", "second level"..:

  a = 1           # first level variable

  loop do         # second level
    b = 2

    loop do       # third level
      c = 3
      puts a      # => 1
      puts b      # => 2
      puts c      # => 3
      break
    end

    puts a        # => 1
    puts b        # => 2
    puts c        # => NameError
    break
  end

  puts a          # => 1
  puts b          # => NameError
  puts c          # => NameError


:::: VARIABLE SHADOWING

What happens when a block takes a parameter and we have one 'n' variable in outer scope and one 'n' in inner scope?

  n = 10

  [1, 2, 3].each do |n|
    puts n
  end

In this case 'puts' will use the |n| parameter so that the result will be:

  # 1
  # 2
  # 3

The internal flow variable takes precedence and also it's not possible
to change the variable in the outer scope.
That's called 'variable shadowing'.

To prevent such problems, it's a good idea to use descriptive variable's names!


:::: VARIABLES AND METHOD DEFINITIONS

A method definition can't access local variables in another scope:

  a = 'hi'

  def some_method
    puts a
  end

  # invoke the method
  some_method     # => NameError: undefined local variable...


A method definition can only access objects in outer scope passed in as arguments:

  def some_method(a)
    puts a
  end

  some_method(5)  # => 5

In the example above, the integer 5 is passed into some_method as an argument, 
assigned to the method parameter, a, and thus made available to the method body
as a local variable.


:::: BLOCKS WITHIN METHOD DEFINITIONS

Everything said befor is valid for blocks inside method definitions:

  def some_method
    a = 1
    5.times do
      puts a
      b = 2
    end

    puts a
    puts b
  end

  some_method     # => NameError: undefined local variable or method `b' for main:Object


:::: CONSTANTS

Constant are different by standard variables. They can be accessed by anywhere!
(Constants are said to have 'lexical scope').

From method definition:

  USERNAME = 'Batman'

  def authenticate
    puts "Logging in #{USERNAME}"
  end

  authenticate    # => Logging in Batman

from blocks:

  FAVORITE_COLOR = 'taupe'

  1.times do
    puts "I love #{FAVORITE_COLOR}!"  # => I love taupe!
  end

from outside a block:

  loop do
    MY_TEAM = "Phoenix Suns"
    break
  end

  puts MY_TEAM    # => Phoenix Suns
  
