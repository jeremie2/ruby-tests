 
::::::::::: FLOWCHART


Flowchart helps us map out the logical sequence of a possible solution in a visual way:
 ________
(________)  start/stop
 _______
|_______|   processing step
 ________
/_______/   input/output
   /\
  /  \      decision
  \  /
   \/
    _
   (_)       connector


   
See 09-flow-chart.pdf

Using flowcharts we are going to use the IMPERATIVE (or PROCEDURAL) way to solve problems.
It means we'll see every single step for example in a loop. That's why in the pseudo code example a while loop is used instead of 'each' method, where many steps are encapsulated and hidden inside it.
The 'each' method represent the DECLARATIVE way of solving a problem.

Using imperative will force us to "think like a computer", understand the logic and make life  easier for debugging.


::::::::::: A LARGER PROBLEM

The previous exercise was: "write a method that determines which number is greatest in a collection".
Let's add some more steps... asking the user to give N collections of number. The method should give a list of the highest number of each collection.


# high level pseudo-code
---------------------------------------------------------
while user wants to keep going
  - ask the user for a collection of numbers
  - extract the largest one from that collection and save it
  - ask the user if they want to input another collection

return saved list of numbers
----------------------------


The "- extract the largest one from that collection and save it" contains many steps.
We can use the code used in the previous assignment: 

---------------------------------------------------------
while user wants to keep going
  - ask the user for a collection of numbers
  - iterate through the collection one by one.
    - save the first value as the starting value.
    - for each iteration, compare the saved value with the current value.
    - if the saved value is smaller, or it's the same
      - move to the next value in the collection
    - otherwise, if the current value is greater
      - reassign the saved value as the current value

  - after iterating through the collection, save the largest value into the list. 
  - ask the user if they want to input another collection

return saved list of numbers
----------------------------


We are going now to translate the process into formal pseudo-code.


# formal pseudo-code
---------------------------------------------------------
START

SET large_numbers = []
SET keep_going = true

WHILE keep_going == true
  GET "enter a collection"
  SET collection
  SET largest_number = SUBPROCESS "extract the largest one from that collection"
  large_numbers.push(largest_number)
  GET "enter another collection?"
  IF "yes"
    keep_going = true
  ELSE
    keep_going = false
  IF keep_going == false
    exit the loop

PRINT large_numbers

END
----------------------------


SUBPROCESS is actually not explained. Including every step would have made this piece of code
too long.
See flowchart 09-large_numbers.pdf
We can see 'num = find_largest(collection)' is based on the find_largest method, basically the method we have built in the previous assignment.

What happen with SUBPROCESS is to use a DECLARATIVE style. This help to have a "general map" of the program we are trying to create. Once it is ready, we can think about the specific sub-process.


::::::::::: CALCULATOR EXAMPLE

- Get the first number
  - Make sure it's valid, otherwise, ask for another
- Get the second number
  - Make sure it's valid, otherwise, ask for another
- Get the operator
  - Make sure it's valid, otherwise, ask again

- Perform operation on the two numbers
- Display result
- Ask if user wants to do another calculation


See 09-calculator-flow.pdf for the flowchart.

