 
:::::::::::: ASSIGNMENT: CALCULATOR BONUS FEATURES

See files: calculator_02.rb and calculator_03.rb (the new one)


:::::::::::: VALID NUMBERS

The exercise is asking to improve some aspects.
At point 1. and 2. it asks respectively for better integer and float validation.

I already knew this simple integer validation:

  def integer?(input)
    input.to_i.to_s == input
  end

..and for floats it's basically the same:

  def float?(input)
    input.to_f.to_s == input
  end

It says that regex and Kernel#Integer method could be used, but at this stage integer?
and float? methods would be enough and... I've combined both into valid_number method:

def valid_number?(num)
  num.to_i().to_s() == num || num.to_f().to_s() == num
end


:::::::::::: ZERO DIVISION ERROR

But there's a problem the exercise is not talking about.
Changing the program this way means that users are allowed to insert zero "0".
How does it work when users choose division and a "0" as denominator? We need
to avoid ZeroDivisionError.

To handle the division problem I thought it could be easier to move the step of
choosing the operation before choosing numbers. This way we know in advance if
we need to handle the ZeroDivisionError error.
While choosing operations, the variable 'operator' get set and can be used later
on, when users enter the two numbers.

:::::::::::: WORKING WITH INTEGER AND FLOAT

The original code uses a 'case' statement to choose the select the chosen operation
to perform. During the operation every number is converted to int or float:

  when '1'
    number1.to_i + number2.to_i
  when '2'
  	.....

But allowing users to enter float numbers, means that we can't wait this last step to set
number type... or, well... we could but things get complicated.

Then I thought to convert the entered number to int or float while users enter numbers.
I've created the set_number(first_or_second_num, operator) method:
(To make things easier the method return a float number.)

	def set_number(first_or_second_num, operator)
		num = ''
		loop do
		  num = point_replace_comma(first_or_second_num)
		  if denominator_zero?(num, first_or_second_num, operator)
		    prompt(messages('not_zero_divide', LANGUAGE))
		  elsif valid_number?(num)
		    break
		  else
		    prompt(messages('not_valid_number', LANGUAGE))
		  end
		end
		num.to_f
	end

the method uses 3 sub-methods:
  
  - replace commas with points (5.5 instead 5,5)
  
	def point_replace_comma(first_or_second_num)
		prompt(messages(first_or_second_num, LANGUAGE))
		num = Kernel.gets().chomp()
		num.gsub!(',', '.') if num.include?(',')
		num
	end

  - it handles ZeroDivisionError if division has been selected (operator == '4' means division)

	def denominator_zero?(num, first_or_second_num, operator)
		first_or_second_num == 'second_number' && operator == '4' && num == '0'
	end

	- put together check for int and float numbers
	def valid_number?(num)
		num.to_i().to_s() == num || num.to_f().to_s() == num
	end
  

:::::::::::: TAKING OFF ".0" WHEN RESULT IS INTEGER 

In order to make things more 'elegant', I've introduced this step:

  if result - result.to_i == 0.0
    result = result.to_i
  else
    result = result.round(2)
  end

# float to integer, e.g. 23.00 => 23
# rounded float, e.g. 23.152 => 23.15

:::::::::::: SAFER CASE STATEMENT

Methods operation_to_message can be dangerous because in case a new line will be added,
the method would not return the word we wont to print. We solve this problem just assigning
the value to the variable 'word' and returning it at the end of the method:

	def opearation_to_message(op)
		word = case op
					 when '1'
				 	  'Adding'
				 	 when '2'
				 	   'Subtracting'
					 when '3'
						 'Multiplying'
					 when '4'
						 'Dividing'
					 end
		word
	end

JUST ONE PROBLEM! Rubocop set an alert saying the use of word is redundant.

:::::::::::: LOCALIZATION

Next step is extracting messages in the program to 'filecalculator_messages.yml'.
This yaml file helps us to set up localization for our program.
Inside the file there will be all the English string, plus strings of any other
language.

Messages are saved in calculator_messages.yml file, following a 'hash style':

	welcome: "Welcome to Calculator! Enter your name:"
	valid_name: "Make sure to enter a valid name."

On top of program we must set:

	require 'yaml'
	MESSAGES = YAML.load_file('calculator_messages.yml')

Now, running 'puts MESSAGES.inspect' we can see that the saved data is threaten
as a hash:

	{
	  "welcome" => "Welcome to Calculator! Enter your name:",
		"valid_name" => "Make sure to use a valid name.",
		"hi" => "Hi ",
		...
	}

This means that MESSAGES is a hash and we can get its elements like this:

 MESSAGES['welcome']  # => "Welcome to Calculator! Enter your name:"

So, inside our program we can set:

	prompt(MESSAGES['welcome'])


But the exercise is asking to go further and set into yaml file strings of a second language
(in my case Italian):

	en:
		welcome: "Welcome to Calculator! Enter your name:"
		valid_name: 'Make sure to use a valid name.'
		.......

	it:
		welcome: "Benvenuta/o in Calculator! Inserisci il tuo nome:"
		valid_name: 'Accertarsi di utilizzare un nome valido.'
		.......

Finally the variable MESSAGES will be a hash containing more hashes:

	{
		"en" =>
			{ 
			"welcome" => "Welcome to Calculator! Enter your name:",
			"valid_name" => "Make sure to use a valid name.",
			"hi" => "Hi ",
			...
			},

		"it" =>
			{ 
			"welcome" => "Benvenuta/o in Calculator! Inserisci il tuo nome:",
			"valid_name" => "Accertarsi di utilizzare un nome valido.",
			"hi" => "Ciao ",
			...
			}
	}

and this is the final version of our code:

	LANGUAGE = chosen_language
	require 'yaml'
	MESSAGES = YAML.load_file('calculator_messages.yml')

	def messages(message, lang='en')
		MESSAGES[lang][message]
	end


- LANGUAGE (in my case) will be set to 'en' or 'it'.

- The 'messages' method takes two arguments:
	- message: name of a string saved into yaml file
	- lang ('en' by default): 'en' or 'it'
  - the returned value is: MESSAGES[lang][message]
  	ex. MESSAGES['it']['welcome'] # => 'Benvenuta/o in Calculator! Inserisci il tuo nome:'

Inside the program we can see the interact part with 'prompt' method (where possible).
Here an example:

	prompt(messages('welcome', LANGUAGE))

Sometimes, mainly because string interpolation with yaml file isn't an easy task, you might
see 'puts' or 'print' methods instead of 'prompt'.

I've finally write at the beginning of the program, a loop to ask the user which language
wants:

	chosen_language = ''
	loop do
		puts("\nSelect language / Selezionare lingua")
		puts <<-MSG
		  1) English
		  2) Italiano
		MSG
		chosen_num = gets.chomp
		case chosen_num
		when '1'
		  chosen_language = 'en'
		  break
		when '2'
		  chosen_language = 'it'
		  break
		else
		  puts "\nNot valid number - Numero non valido\n\n"
		end
	end

	LANGUAGE = chosen_language

