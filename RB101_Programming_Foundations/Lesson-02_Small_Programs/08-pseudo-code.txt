There are two layers to solving any problem:

The logical problem domain layer.
The syntactical programming language layer.

Using pseudo code helps to work first to the logic of a program.
In a second moment, once we have the structure of the program,
we can concentrate to the syntax

EXAMPLE
# method that determines which number is greatest in a collection

First let's write down all the steps:

---------------------------------------
Given a collection of integers.

Iterate through the collection one by one.
  - save the first value as the starting value.
  - for each iteration, compare the saved value with the current value.
  - if the saved value is greater, or it's the same
    - move to the next value in the collection
  - otherwise, if the current value is greater
    - reassign the saved value as the current value

After iterating through the collection, return the saved value.
---------------------------------------

We can set some keywords so that this first example can look
closer to a real program.

keyword   meaning:
START               start of the program
SET                 sets a variable we can use for later
GET                 retrieve input from user
PRINT               displays output to user
READ                retrieve value from variable
IF, ELSE IF, ELSE   show conditional branches in logic
WHILE               show looping logic
END                 end of the program

---------------------------------------
START

# Given a collection of integers called "numbers"

SET iterator = 1
SET saved_number = value within numbers collection at space 1

WHILE iterator <= length of numbers
  SET current_number = value within numbers collection at space "iterator"
  IF saved_number >= current_number
    go to the next iteration
  ELSE
    saved_number = current_number

  iterator = iterator + 1

PRINT saved_number

END
---------------------------------------


We can now translate pseudo-code to program code:

---------------------------------------
def find_greatest(numbers)
  saved_number = nil

  numbers.each do |num|
    saved_number ||= num  # || works as a circuit. It assign num to 
                          # saved_number only if num is not truthy.
    if saved_number >= num
      next
    else
      saved_number = num
    end
  end

  saved_number
end
---------------------------------------





